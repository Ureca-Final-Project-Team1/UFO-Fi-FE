generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banned_words {
  id   BigInt @id @default(autoincrement())
  word String @db.VarChar(255)
}

model fcm_tokens {
  id      BigInt @id @default(autoincrement())
  user_id BigInt
  fcm     String @db.VarChar(4096)
  users   users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "FKj2kob865pl9dv5vwrs2pmshjv")

  @@index([user_id], map: "FKj2kob865pl9dv5vwrs2pmshjv")
}

model follows {
  follower_user_id                       BigInt
  following_user_id                      BigInt
  id                                     BigInt @id @default(autoincrement())
  users_follows_follower_user_idTousers  users  @relation("follows_follower_user_idTousers", fields: [follower_user_id], references: [id], onUpdate: Restrict, map: "FKe53q5i2pk9a4rddeb47cac9rd")
  users_follows_following_user_idTousers users  @relation("follows_following_user_idTousers", fields: [following_user_id], references: [id], onUpdate: Restrict, map: "FKk1b1yn6h0224kelm91qetqxen")

  @@unique([follower_user_id, following_user_id], map: "UK2hmqm6mdmmrf32pilkffiyf7v")
  @@index([following_user_id], map: "FKk1b1yn6h0224kelm91qetqxen")
}

model interested_posts {
  carrier                 Int?
  interested_max_capacity Int?
  interested_max_price    Int?
  interested_min_capacity Int?
  interested_min_price    Int?
  id                      BigInt                       @id @default(autoincrement())
  user_id                 BigInt?
  reputation              interested_posts_reputation?
  users                   users?                       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKhl8yhxfsrad1y4dojxdh3u3si")

  @@index([user_id], map: "FKhl8yhxfsrad1y4dojxdh3u3si")
}

model nickname {
  id                 BigInt  @id @default(autoincrement())
  nickname_adjective String? @db.VarChar(255)
}

model notification_settings {
  is_event_agreed           Boolean? @db.Bit(1)
  is_follower_post_agreed   Boolean? @db.Bit(1)
  is_interested_post_agreed Boolean? @db.Bit(1)
  is_reported_agreed        Boolean? @db.Bit(1)
  is_sell_agreed            Boolean? @db.Bit(1)
  id                        BigInt   @id @default(autoincrement())
  user_id                   BigInt?  @unique(map: "UKm9ggfvif86mvq5382j88cequn")
  users                     users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKmh6alfw96lc851ea0snhijfk")
}

model plans {
  is_ultimated_amount          Boolean?               @db.Bit(1)
  mobile_data_amount           Int?
  sell_mobile_data_capacity_gb Int
  id                           BigInt                 @id @default(autoincrement())
  name                         String                 @db.VarChar(255)
  carrier                      plans_carrier
  mobile_data_type             plans_mobile_data_type
  user_plans                   user_plans[]
}

model profile_photo {
  id                BigInt  @id @default(autoincrement())
  profile_photo_url String? @db.VarChar(255)
  users             users[]
}

model refreshs {
  id    BigInt  @id @default(autoincrement())
  token String? @db.VarChar(255)
  users users?
}

model reports {
  created_at                             DateTime    @db.DateTime(6)
  id                                     BigInt      @id @default(autoincrement())
  reported_user_id                       BigInt
  reporting_user_id                      BigInt
  trade_post_id                          BigInt
  content                                String      @db.VarChar(255)
  users_reports_reporting_user_idTousers users       @relation("reports_reporting_user_idTousers", fields: [reporting_user_id], references: [id], onUpdate: Restrict, map: "FK8ia60sl09wkwhnkikpmi6007d")
  users_reports_reported_user_idTousers  users       @relation("reports_reported_user_idTousers", fields: [reported_user_id], references: [id], onUpdate: Restrict, map: "FKb3bqi44mjskbnwupr31nfq5ui")
  trade_posts                            trade_posts @relation(fields: [trade_post_id], references: [id], onUpdate: Restrict, map: "FKc40dtj73m376ycah4y0shu7fe")

  @@unique([trade_post_id, reporting_user_id], map: "UKexk27mx9uro1992lsat72lnw0")
  @@index([reporting_user_id], map: "FK8ia60sl09wkwhnkikpmi6007d")
  @@index([reported_user_id], map: "FKb3bqi44mjskbnwupr31nfq5ui")
}

model trade_histories {
  created_at    DateTime?               @db.DateTime(6)
  id            BigInt                  @id @default(autoincrement())
  trade_post_id BigInt?                 @unique(map: "UKkhwebf5bgm66r0yvcs4h4kcmp")
  user_id       BigInt?
  status        trade_histories_status?
  users         users?                  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKetvgnlh953qk751natofw5b40")
  trade_posts   trade_posts?            @relation(fields: [trade_post_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKew9h39ucqipv6r9pkkdlq94io")

  @@index([user_id], map: "FKetvgnlh953qk751natofw5b40")
}

model trade_posts {
  sell_mobile_data_capacity_gb Int?
  total_zet                    Int?
  zet_per_unit                 Int?
  created_at                   DateTime?                     @db.DateTime(6)
  id                           BigInt                        @id @default(autoincrement())
  user_id                      BigInt?
  title                        String?                       @db.VarChar(255)
  carrier                      trade_posts_carrier?
  mobile_data_type             trade_posts_mobile_data_type?
  status                       trade_posts_status?
  reports                      reports[]
  trade_histories              trade_histories?
  users                        users?                        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKqy0qemklwus3v4tg25c19upxd")

  @@index([user_id], map: "FKqy0qemklwus3v4tg25c19upxd")
}

model user_accounts {
  id           BigInt  @id @default(autoincrement())
  bank         String? @db.VarChar(255)
  bank_account String? @db.VarChar(255)
  password     String? @db.VarChar(255)
  users        users?
}

model user_plans {
  sellable_data_amount Int?
  id                   BigInt  @id @default(autoincrement())
  plan_id              BigInt?
  plans                plans?  @relation(fields: [plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKq3swp19ett3gtuhruau03sxy2")
  users                users?

  @@index([plan_id], map: "FKq3swp19ett3gtuhruau03sxy2")
}

model users {
  is_active                                Boolean?               @db.Bit(1)
  zet_asset                                Int?
  id                                       BigInt                 @id @default(autoincrement())
  profile_photo_id                         BigInt?
  refresh_id                               BigInt?                @unique(map: "UK9sde85ftxx2wh0ot29qmagxxg")
  user_account_id                          BigInt?                @unique(map: "UKjm7fmb3hqmw0m2o58w571egjg")
  user_plan_id                             BigInt?                @unique(map: "UKopnelebdcyc0owd6hw02x29rx")
  email                                    String?                @db.VarChar(255)
  kakao_id                                 String?                @db.VarChar(255)
  name                                     String?                @db.VarChar(255)
  nickname                                 String?                @db.VarChar(255)
  phone_number                             String?                @db.VarChar(255)
  reputation                               String?                @db.VarChar(255)
  role                                     users_role?
  fcm_tokens                               fcm_tokens[]
  follows_follows_follower_user_idTousers  follows[]              @relation("follows_follower_user_idTousers")
  follows_follows_following_user_idTousers follows[]              @relation("follows_following_user_idTousers")
  interested_posts                         interested_posts[]
  notification_settings                    notification_settings?
  reports_reports_reporting_user_idTousers reports[]              @relation("reports_reporting_user_idTousers")
  reports_reports_reported_user_idTousers  reports[]              @relation("reports_reported_user_idTousers")
  trade_histories                          trade_histories[]
  trade_posts                              trade_posts[]
  user_plans                               user_plans?            @relation(fields: [user_plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK1tpe52ppvvmeshdps6mdc6aun")
  user_accounts                            user_accounts?         @relation(fields: [user_account_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKbcurcu3ke5e0bq4ld5ym9va34")
  profile_photo                            profile_photo?         @relation(fields: [profile_photo_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKjkh0ielp5opkdbqmdmq4x5g75")
  refreshs                                 refreshs?              @relation(fields: [refresh_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKt80anxmture0i6gt74feisyb1")

  @@index([profile_photo_id], map: "FKjkh0ielp5opkdbqmdmq4x5g75")
}

enum trade_histories_status {
  PURCHASE
  SALE
}

enum plans_carrier {
  KT
  LGU
  SKT
}

enum plans_mobile_data_type {
  LTE
  G   @map("_5G")
}

enum interested_posts_reputation {
  FIGHTING
}

enum trade_posts_carrier {
  KT
  LGU
  SKT
}

enum trade_posts_mobile_data_type {
  LTE
  G   @map("_5G")
}

enum trade_posts_status {
  DELETED
  EXPIRED
  REPORTED
  SELLING
  SOLD_OUT
}

enum users_role {
  ROLE_ADMIN
  ROLE_NO_INFO
  ROLE_REPORTED
  ROLE_USER
}
