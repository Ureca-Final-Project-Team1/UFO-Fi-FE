generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banned_words {
  id   BigInt @id @default(autoincrement())
  word String @db.VarChar(255)
}

model fcm_tokens {
  id      BigInt @id @default(autoincrement())
  user_id BigInt
  fcm     String @db.VarChar(4096)
  users   users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "FKj2kob865pl9dv5vwrs2pmshjv")

  @@index([user_id], map: "FKj2kob865pl9dv5vwrs2pmshjv")
}

model follows {
  follower_user_id                       BigInt
  following_user_id                      BigInt
  id                                     BigInt @id @default(autoincrement())
  users_follows_follower_user_idTousers  users  @relation("follows_follower_user_idTousers", fields: [follower_user_id], references: [id], onUpdate: Restrict, map: "FKe53q5i2pk9a4rddeb47cac9rd")
  users_follows_following_user_idTousers users  @relation("follows_following_user_idTousers", fields: [following_user_id], references: [id], onUpdate: Restrict, map: "FKk1b1yn6h0224kelm91qetqxen")

  @@unique([follower_user_id, following_user_id], map: "UK2hmqm6mdmmrf32pilkffiyf7v")
  @@index([following_user_id], map: "FKk1b1yn6h0224kelm91qetqxen")
}

model interested_posts {
  carrier                 Int?
  interested_max_capacity Int?
  interested_max_price    Int?
  interested_min_capacity Int?
  interested_min_price    Int?
  id                      BigInt                       @id @default(autoincrement())
  user_id                 BigInt?
  reputation              interested_posts_reputation?
  users                   users?                       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKhl8yhxfsrad1y4dojxdh3u3si")

  @@index([user_id], map: "FKhl8yhxfsrad1y4dojxdh3u3si")
}

model nickname {
  id                 BigInt  @id @default(autoincrement())
  nickname_adjective String? @db.VarChar(255)
}

model notification_histories {
  id                BigInt                                    @id @default(autoincrement())
  notified_at       DateTime?                                 @db.DateTime(6)
  user_id           BigInt?
  content           String?                                   @db.VarChar(255)
  title             String?                                   @db.VarChar(255)
  url               String?                                   @db.VarChar(255)
  notification_type notification_histories_notification_type?
  users             users?                                    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKd8sa0pk7oc16oxkqihyv1daj7")

  @@index([user_id], map: "FKd8sa0pk7oc16oxkqihyv1daj7")
}

model notification_settings {
  is_event_agreed           Boolean? @db.Bit(1)
  is_follower_post_agreed   Boolean? @db.Bit(1)
  is_interested_post_agreed Boolean? @db.Bit(1)
  is_reported_agreed        Boolean? @db.Bit(1)
  is_sell_agreed            Boolean? @db.Bit(1)
  id                        BigInt   @id @default(autoincrement())
  user_id                   BigInt?  @unique(map: "UKm9ggfvif86mvq5382j88cequn")
  users                     users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKmh6alfw96lc851ea0snhijfk")
}

model payments {
  amount       Int
  approved_at  DateTime?       @db.DateTime(6)
  id           BigInt          @id @default(autoincrement())
  requested_at DateTime?       @db.DateTime(6)
  user_id      BigInt?
  method       String?         @db.VarChar(255)
  order_id     String          @unique(map: "UK8vo36cen604as7etdfwmyjsxt") @db.VarChar(255)
  package_name String?         @db.VarChar(255)
  payment_key  String?         @db.VarChar(255)
  status       payments_status
  users        users?          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKj94hgy9v5fw1munb90tar2eje")

  @@index([user_id], map: "FKj94hgy9v5fw1munb90tar2eje")
}

model plans {
  is_ultimated_amount          Boolean?               @db.Bit(1)
  mobile_data_amount           Int?
  sell_mobile_data_capacity_gb Int
  id                           BigInt                 @id @default(autoincrement())
  name                         String                 @db.VarChar(255)
  carrier                      plans_carrier
  mobile_data_type             plans_mobile_data_type
  user_plans                   user_plans[]
}

model profile_photo {
  id                BigInt  @id @default(autoincrement())
  profile_photo_url String? @db.VarChar(255)
  users             users[]
}

model refreshs {
  id    BigInt  @id @default(autoincrement())
  token String? @db.VarChar(255)
  users users?
}

model reports {
  created_at                             DateTime    @db.DateTime(6)
  id                                     BigInt      @id @default(autoincrement())
  reported_user_id                       BigInt
  reporting_user_id                      BigInt
  trade_post_id                          BigInt
  content                                String      @db.VarChar(255)
  users_reports_reporting_user_idTousers users       @relation("reports_reporting_user_idTousers", fields: [reporting_user_id], references: [id], onUpdate: Restrict, map: "FK8ia60sl09wkwhnkikpmi6007d")
  users_reports_reported_user_idTousers  users       @relation("reports_reported_user_idTousers", fields: [reported_user_id], references: [id], onUpdate: Restrict, map: "FKb3bqi44mjskbnwupr31nfq5ui")
  trade_posts                            trade_posts @relation(fields: [trade_post_id], references: [id], onUpdate: Restrict, map: "FKc40dtj73m376ycah4y0shu7fe")

  @@unique([trade_post_id, reporting_user_id], map: "UKexk27mx9uro1992lsat72lnw0")
  @@index([reporting_user_id], map: "FK8ia60sl09wkwhnkikpmi6007d")
  @@index([reported_user_id], map: "FKb3bqi44mjskbnwupr31nfq5ui")
}

model trade_histories {
  created_at    DateTime?               @db.DateTime(6)
  id            BigInt                  @id @default(autoincrement())
  trade_post_id BigInt?
  trade_post_id BigInt?
  user_id       BigInt?
  status        trade_histories_status?
  users         users?                  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKetvgnlh953qk751natofw5b40")
  trade_posts   trade_posts?            @relation(fields: [trade_post_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKew9h39ucqipv6r9pkkdlq94io")

  @@index([user_id], map: "FKetvgnlh953qk751natofw5b40")
  @@index([trade_post_id], map: "FKew9h39ucqipv6r9pkkdlq94io")
}

model trade_posts {
  sell_mobile_data_capacity_gb Int?
  total_zet                    Int?
  zet_per_unit                 Int?
  created_at                   DateTime?                     @db.DateTime(6)
  id                           BigInt                        @id @default(autoincrement())
  user_id                      BigInt?
  title                        String?                       @db.VarChar(255)
  carrier                      trade_posts_carrier?
  mobile_data_type             trade_posts_mobile_data_type?
  status                       trade_posts_status?
  reports                      reports[]
  trade_histories              trade_histories[]
  users                        users?                        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKqy0qemklwus3v4tg25c19upxd")

  @@index([user_id], map: "FKqy0qemklwus3v4tg25c19upxd")
}

model user_accounts {
  id           BigInt  @id @default(autoincrement())
  user_id      BigInt? @unique(map: "UK8o642jss0gbxconmpyu9hke6m")
  bank         String? @db.VarChar(255)
  bank_account String? @db.VarChar(255)
  password     String? @db.VarChar(255)
  users        users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKeu175seh3s7swirv0s1ugieyu")
}

model user_plans {
  purchase_data_amount Int?
  sellable_data_amount Int?
  id                   BigInt  @id @default(autoincrement())
  plan_id              BigInt?
  user_id              BigInt? @unique(map: "UKiadtx01qxop97dsldqm2wwn9")
  users                users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK8ws03c6bnq8p220rbnlnw2blv")
  plans                plans?  @relation(fields: [plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKq3swp19ett3gtuhruau03sxy2")

  @@index([plan_id], map: "FKq3swp19ett3gtuhruau03sxy2")
}

model users {
  is_active                                Boolean?                 @db.Bit(1)
  zet_asset                                Int?
  id                                       BigInt                   @id @default(autoincrement())
  profile_photo_id                         BigInt?
  refresh_id                               BigInt?                  @unique(map: "UK9sde85ftxx2wh0ot29qmagxxg")
  email                                    String?                  @db.VarChar(255)
  kakao_id                                 String?                  @db.VarChar(255)
  name                                     String?                  @db.VarChar(255)
  nickname                                 String?                  @db.VarChar(255)
  phone_number                             String?                  @db.VarChar(255)
  reputation                               String?                  @db.VarChar(255)
  role                                     users_role?
  fcm_tokens                               fcm_tokens[]
  follows_follows_follower_user_idTousers  follows[]                @relation("follows_follower_user_idTousers")
  follows_follows_following_user_idTousers follows[]                @relation("follows_following_user_idTousers")
  interested_posts                         interested_posts[]
  notification_histories                   notification_histories[]
  notification_settings                    notification_settings?
  payments                                 payments[]
  reports_reports_reporting_user_idTousers reports[]                @relation("reports_reporting_user_idTousers")
  reports_reports_reported_user_idTousers  reports[]                @relation("reports_reported_user_idTousers")
  trade_histories                          trade_histories[]
  trade_posts                              trade_posts[]
  user_accounts                            user_accounts?
  user_plans                               user_plans?
  profile_photo                            profile_photo?           @relation(fields: [profile_photo_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKjkh0ielp5opkdbqmdmq4x5g75")
  refreshs                                 refreshs?                @relation(fields: [refresh_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FKt80anxmture0i6gt74feisyb1")

  @@index([profile_photo_id], map: "FKjkh0ielp5opkdbqmdmq4x5g75")
}

enum trade_histories_status {
  PURCHASE
  SALE
}

enum plans_carrier {
  KT
  LGU
  SKT
}

enum notification_histories_notification_type {
  BENEFIT
  FOLLOWER_POST
  INTERESTED_POST
  REPORTED
  SELL
  TRADE
}

enum plans_mobile_data_type {
  LTE
  G   @map("_5G")
}

enum interested_posts_reputation {
  FIGHTING
}

enum trade_posts_carrier {
  KT
  LGU
  SKT
}

enum trade_posts_mobile_data_type {
  LTE
  G   @map("_5G")
}

enum payments_status {
  DONE
  FAIL
  IN_PROGRESS
  READY
  TIMEOUT
}

enum trade_posts_status {
  DELETED
  EXPIRED
  REPORTED
  SELLING
  SOLD_OUT
}

enum users_role {
  ROLE_ADMIN
  ROLE_NO_INFO
  ROLE_REPORTED
  ROLE_USER
}

model voyage_letters {
  id           BigInt   @id @default(autoincrement())
  step         Int      // 1~5단계
  user_id      BigInt
  recipient_id BigInt
  content      String   @db.VarChar(1024)
  created_at   DateTime @default(now())
  isLongestPath  Boolean  @default(false) // 현재 최장 경로인지 여부

  @@index([user_id])
  @@unique([user_id, step]) // 사용자별 최대 5단계만 작성 가능
}


model achievement {
  id              Int      @id @default(autoincrement())
  level           Int
  type            AchievementType
  condition_value Int
  name            String   // 업적 이름
  description     String   // 업적 설명
}

model user_achievements {
  id             BigInt   @id @default(autoincrement())
  user_id        BigInt
  achievement_id Int
  achieved_at    DateTime
  @@unique([user_id, achievement_id])
}


enum AchievementType {
  trade 
  rotate
  follow
}