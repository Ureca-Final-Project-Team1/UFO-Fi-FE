# FSD 아키텍처 구조
architecture:
  fsd_structure:
    - 'features/[domain]/components/ vs shared/ui/ 적절한 분리'
    - 'src/api/services/[domain]/ 구조 준수'
    - 'features/[domain]/index.ts에서 배럴 익스포트 확인'
    - '실제 3개 이상 도메인에서 쓰일 때만 shared/ui로 분리'

# 네이밍 컨벤션
naming:
  folders_files: 'kebab-case (user-profile.ts, login-form/)'
  components: 'PascalCase (UserCard.tsx, MainLayout.tsx)'
  functions_variables: 'camelCase (handleClick, userList)'
  types_interfaces: 'PascalCase (UserProps, ButtonVariant)'
  constants: 'UPPER_SNAKE_CASE (DEFAULT_TIMEOUT, MAX_RETRY)'
  css_classes: 'kebab-case (nav-container-bg, exploration-button)'
  image_files: 'snake_case (header_logo.svg, main_bg.png)'
  custom_hooks: 'use + PascalCase (useAuth, useFetchData)'

# API 구조 표준화
api_patterns:
  structure: '{domain}API.{method} 패턴 (notificationAPI.getSettings)'
  import_path: "import { notificationAPI } from '@/api'"
  types_location: 'src/api/types/[domain].ts 위치'
  axios_instance: 'src/api/client/axios.ts에서 설정'

# React 컴포넌트 규칙
react_components:
  props:
    - 'Props interface 정의 및 비구조화 할당 필수'
    - 'Props 타입은 interface로 선언 (Props 또는 컴포넌트명Props)'
  jsx_rules:
    - 'boolean props 명시적 작성 금지 (isOpen={true} => bad, isOpen => good)'
    - 'key prop은 배열 인덱스 사용 금지'
  performance:
    - '컴포넌트 내 함수는 useCallback 사용 권장'
    - '복잡한 계산은 useMemo 사용'
  structure:
    - '각 컴포넌트는 독립된 폴더로 관리'
    - '구현은 index.tsx에 작성해 import 경로 간결하게 유지'

# 상태 관리
state_management:
  zustand:
    - 'useXxxStore 네이밍'
    - '액션 네이밍: setXxx, resetXxx, toggleXxx'
    - '/stores/[도메인]/useXxxStore.ts 구조'
  react_query:
    - "쿼리 키는 배열로 구조화 ['users', userId]"
    - '/queries/ 폴더에서 useQuery, useMutation 정의'

# 스타일링 가이드
styling:
  tailwind:
    - '유틸리티 클래스 우선, 커스텀 CSS는 최소화'
    - '10줄 이상 스타일은 별도 CSS 파일로 분리'
  css_structure:
    components_folder:
      - '특정 컴포넌트 전용 스타일'
      - '10줄 이상 또는 복잡한 로직 (가상요소, 미디어쿼리)'
      - '관련 클래스 3개 이상'
    utils_folder:
      - '여러 곳에서 재사용되는 헬퍼 클래스'
      - '플랫폼별 최적화 코드'
  css_naming:
    - '기능-대상-용도 (nav-container-bg)'
    - '용도-타입 (exploration-button)'
    - '스타일-타입-변형 (gradient-card-1)'

# Next.js 15 규칙
nextjs:
  app_router:
    - "'use client' 지시어 필요한 곳에만 명시"
    - 'Server Component 우선, Client Component 최소화'
    - 'Dynamic import는 React.lazy() 대신 next/dynamic 사용'
  file_structure:
    - 'app/ 폴더에서 App Router 구조 준수'
    - 'API routes는 app/api/ 폴더에 정의'

# Storybook 규칙
storybook:
  - '컴포넌트 폴더 내에 .stories.tsx 파일로 작성'
  - '관련된 타입, 스타일, 스토리를 한 폴더에 관리'

# 커스텀 훅
custom_hooks:
  - '파일명과 함수명은 use로 시작'
  - '복잡한 로직은 반드시 훅으로 추출'
  - "'use client' 명시 필요 (Next.js App Router 기준)"

# 타입 정의
types:
  - '도메인별 요청/응답 타입은 types/[도메인]에서 정의'
  - 'Props 타입은 interface로 명시하고, 비구조화 할당 사용'
  - 'Generic 타입 적절한 활용'

# 필수 주석 가이드
required_comments:
  - '복잡한 비즈니스 로직 (3줄 이상 조건문)'
  - '외부 API 연동 부분'
  - '성능 최적화 관련 코드 (useMemo, useCallback 이유)'
  - '임시 해결책(workaround) 코드'
  - '정규식이나 복잡한 계산 로직'

# 검토 우선순위
review_priority:
  1: '버그/오류'
  2: '타입 안정성'
  3: 'FSD 아키텍처 위반'
  4: '네이밍 컨벤션 위반'
  5: '성능 최적화'
  6: '코드 가독성'
